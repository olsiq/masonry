import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import { fetchCount } from "./counterAPI";

const initialState = {
  status: "not loaded yet",
  url: [],
  id: [],
  author: [],
};

export const fetchFromApi = createAsyncThunk("fetchData", async (url) => {
  const response = await fetch(url);
  const data = await response.json();
  return data;
});

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchFromApi.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchFromApi.fulfilled, (state, action) => {
        state.status = "good";
        state.url = action.payload.map((element) => element.url);
        state.id = action.payload.map((element) => element.id);
        state.author = action.payload.map((element) => element.author);
      });
  },
});

// selectors
export const selectCount = (state) => state.counter.value;
export const selectUrls = (state) => state.counter.url;
export const selectIds = (state) => state.counter.id;
export const selectAuthors = (state) => state.counter.author;

export default counterSlice.reducer;
